package com.x8ing.thsensor.thserver.web;

import com.x8ing.thsensor.thserver.db.dao.SessionRequestRepository;
import com.x8ing.thsensor.thserver.db.entity.SessionRequest;
import com.x8ing.thsensor.thserver.utils.Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.util.WebUtils;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


public class MyRequestInterceptor implements HandlerInterceptor {


    private final Logger log = LoggerFactory.getLogger(this.getClass());

    public static final String TH_KEY_CLIENT_ID = "TH-KEY-CLIENT-ID"; // underscore not allowed by default in nginx
    public static String CLIENT_VERSION = "TH-KEY-CLIENT-VERSION"; // underscore not allowed by default in nginx

    private static final String START_TIME_ATTR_NAME = "TH-START-TIME";

    private final SessionRequestRepository sessionRequestRepository;

    public MyRequestInterceptor(SessionRequestRepository sessionRequestRepository) {
        this.sessionRequestRepository = sessionRequestRepository;
    }

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        long startTime = System.currentTimeMillis();
        request.setAttribute(START_TIME_ATTR_NAME, startTime);
        return true;
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

        long startTime = (Long) request.getAttribute(START_TIME_ATTR_NAME);
        long endTime = System.currentTimeMillis();
        long executionTime = endTime - startTime;

        String path = request.getServletPath();
        String clientId = request.getHeader(TH_KEY_CLIENT_ID); // id generated by the client
        String clientVersion = request.getHeader(CLIENT_VERSION);

        String ip = Utils.getRequestIP(request);

        Cookie cookie = WebUtils.getCookie(request, MySessionFilter.TH_SERVER_SESSION_ID);
        String sessionId = "unknown";
        if (cookie != null) {
            sessionId = cookie.getValue();
        }

        long dtProcessing = System.currentTimeMillis() - startTime;

        // save requests only
        if (MySessionFilter.isSessionRelevantRequest(request)) {

            SessionRequest sessionRequest = new SessionRequest();
            sessionRequest.setPath(path);
            sessionRequest.setSessionId(sessionId);
            sessionRequest.setClientId(clientId);
            sessionRequest.setClientVersion(clientVersion);
            sessionRequest.setIp(ip);
            sessionRequest.setProcessingTime(dtProcessing);
            sessionRequest.setHttpStatus(String.valueOf(response.getStatus()));
            sessionRequest.setException(ex != null ? ex.getMessage() : null);

            sessionRequestRepository.save(sessionRequest);

            long dtTotal = System.currentTimeMillis() - startTime;

            log.info("Got request and saved it. dtTotal=" + dtTotal + " " + sessionRequest);

        } else {

            log.info("Did receive a request which was not persisted. url=" + path);
        }
    }
}
